// <auto-generated />
using System;
using DndMeetingAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DndMeetingAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("DndMeetingAPI.Models.DayWithFreeTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DayWithFreeTimes");
                });

            modelBuilder.Entity("DndMeetingAPI.Models.FreeTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DayWithFreeTimeId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DayWithFreeTimeId");

                    b.HasIndex("UserId");

                    b.ToTable("FreeTimes");
                });

            modelBuilder.Entity("DndMeetingAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DndMeetingAPI.Models.UsersAndDaysWithFreeTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DayWithFreeTimeId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DayWithFreeTimeId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersAndDaysWithFreeTimes");
                });

            modelBuilder.Entity("DndMeetingAPI.Models.FreeTime", b =>
                {
                    b.HasOne("DndMeetingAPI.Models.DayWithFreeTime", "DayWithFreeTime")
                        .WithMany("FreeTimes")
                        .HasForeignKey("DayWithFreeTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndMeetingAPI.Models.User", "User")
                        .WithMany("FreeTimes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayWithFreeTime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DndMeetingAPI.Models.UsersAndDaysWithFreeTime", b =>
                {
                    b.HasOne("DndMeetingAPI.Models.DayWithFreeTime", "DayWithFreeTime")
                        .WithMany("UsersAndDaysWithFreeTime")
                        .HasForeignKey("DayWithFreeTimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DndMeetingAPI.Models.User", "User")
                        .WithMany("UsersAndDaysWithFreeTime")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DayWithFreeTime");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DndMeetingAPI.Models.DayWithFreeTime", b =>
                {
                    b.Navigation("FreeTimes");

                    b.Navigation("UsersAndDaysWithFreeTime");
                });

            modelBuilder.Entity("DndMeetingAPI.Models.User", b =>
                {
                    b.Navigation("FreeTimes");

                    b.Navigation("UsersAndDaysWithFreeTime");
                });
#pragma warning restore 612, 618
        }
    }
}
